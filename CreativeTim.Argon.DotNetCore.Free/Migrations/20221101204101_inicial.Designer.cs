// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApp.Identity;

#nullable disable

namespace BoraWeb.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20221101204101_inicial")]
    partial class inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JuntoSeguros.Models.Tpessoa", b =>
                {
                    b.Property<int>("ID_PESSOA")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID_PESSOA");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID_PESSOA"));

                    b.Property<string>("DC_CPFCNPJ")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("DC_CPFCNPJ");

                    b.Property<string>("DS_BAIRRO")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("DS_BAIRRO");

                    b.Property<string>("DS_CIDADE")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("DS_CIDADE");

                    b.Property<string>("DS_COMPLEMENTO")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("DS_COMPLEMENTO");

                    b.Property<string>("DS_EMAIL")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("DS_EMAIL");

                    b.Property<string>("DS_ENDERECO")
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("DS_ENDERECO");

                    b.Property<string>("DS_PAIS")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("DS_PAIS");

                    b.Property<string>("DS_SITE")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("DS_SITE");

                    b.Property<string>("DS_UF")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("DS_UF");

                    b.Property<DateTime?>("DT_ATUALIZACAO")
                        .HasColumnType("timestamp")
                        .HasColumnName("DT_ATUALIZACAO");

                    b.Property<DateTime>("DT_CADASTRO")
                        .HasColumnType("timestamp")
                        .HasColumnName("DT_CADASTRO");

                    b.Property<DateTime?>("DT_NASCIMENTO")
                        .HasColumnType("timestamp")
                        .HasColumnName("DT_NASCIMENTO");

                    b.Property<int?>("FK_PESSOA_ATUALIZACAO")
                        .HasColumnType("integer")
                        .HasColumnName("FK_PESSOA_ATUALIZACAO");

                    b.Property<int?>("FK_PESSOA_CADASTRO")
                        .HasColumnType("integer")
                        .HasColumnName("FK_PESSOA_CADASTRO");

                    b.Property<byte>("FL_ATIVO")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("FL_ATIVO")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("NM_CEP")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("NM_CEP");

                    b.Property<string>("NM_DDD")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("NM_DDD");

                    b.Property<string>("NM_ENDERECO")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("NM_ENDERECO");

                    b.Property<string>("NM_FONE")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("NM_FONE");

                    b.Property<string>("NO_PESSOA")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("NO_PESSOA");

                    b.Property<string>("OB_ATUALIZACAO")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("OB_ATUALIZACAO");

                    b.Property<string>("OB_PESSOA")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("OB_PESSOA");

                    b.Property<string>("TP_PESSOA")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("TP_PESSOA")
                        .IsFixedLength();

                    b.HasKey("ID_PESSOA");

                    b.ToTable("TPESSOA", (string)null);
                });

            modelBuilder.Entity("JuntoSeguros.Models.Tusuario", b =>
                {
                    b.Property<int>("ID_USUARIO")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID_USUARIO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID_USUARIO"));

                    b.Property<string>("DS_LOGIN")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("DS_LOGIN");

                    b.Property<DateTime?>("DT_ATUALIZACAO")
                        .HasColumnType("timestamp")
                        .HasColumnName("DT_ATUALIZACAO");

                    b.Property<DateTime>("DT_CADASTRO")
                        .HasColumnType("timestamp")
                        .HasColumnName("DT_CADASTRO");

                    b.Property<DateTime?>("DT_ULTIMO_ACESSO")
                        .HasColumnType("timestamp")
                        .HasColumnName("DT_ULTIMO_ACESSO");

                    b.Property<int>("FK_PESSOA")
                        .HasColumnType("integer")
                        .HasColumnName("FK_PESSOA");

                    b.Property<int?>("FK_PESSOA_ATUALIZACAO")
                        .HasColumnType("integer")
                        .HasColumnName("fk_pessoa_atualizacao");

                    b.Property<int>("FK_PESSOA_CADASTRO")
                        .HasColumnType("integer")
                        .HasColumnName("FK_PESSOA_CADASTRO");

                    b.Property<string>("ID_IDENTITY_USER")
                        .HasMaxLength(46)
                        .HasColumnType("character(46)")
                        .HasColumnName("Id_Identity_User")
                        .IsFixedLength();

                    b.Property<string>("OB_USUARIO")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("OB_USUARIO");

                    b.Property<byte?>("QT_ERRO_SENHA")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("QT_ERRO_SENHA")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("ID_USUARIO");

                    b.HasIndex("FK_PESSOA");

                    b.ToTable("TUSUARIO", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebApp.Identity.MyUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Member")
                        .HasColumnType("text");

                    b.Property<string>("NomeCompleto")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("OrgId")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("OrgId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WebApp.Identity.Organization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Organizations", (string)null);
                });

            modelBuilder.Entity("JuntoSeguros.Models.Tusuario", b =>
                {
                    b.HasOne("JuntoSeguros.Models.Tpessoa", "Tpessoa")
                        .WithMany("Tusuarios")
                        .HasForeignKey("FK_PESSOA")
                        .IsRequired()
                        .HasConstraintName("FK_TUSUARIO_TPESSOA");

                    b.Navigation("Tpessoa");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApp.Identity.MyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApp.Identity.MyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Identity.MyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApp.Identity.MyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.Identity.MyUser", b =>
                {
                    b.HasOne("WebApp.Identity.Organization", null)
                        .WithMany()
                        .HasForeignKey("OrgId");
                });

            modelBuilder.Entity("JuntoSeguros.Models.Tpessoa", b =>
                {
                    b.Navigation("Tusuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
